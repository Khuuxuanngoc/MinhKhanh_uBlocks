module main
author unknown
version 1 0 
description ''
variables _buttonPinList _debounceDelayList _longPressTimeList _buttonStateList khanhVariableGlobal 

  spec ' ' 'Set Button port' 'Set Button port _ longPressTime (ms) _' 'str num' 'D9' 1000
  spec ' ' 'Set button port' 'Set Button port _ debounceDelayTime (ms) _' 'str num' 'D9' 50
  spec 'r' '_checkPortToPin' '_checkPortToPin _' 'auto' 'D9'
  spec ' ' '_updateButtonLoop' '_updateButtonLoop'
  spec 'r' 'is Button port' 'is Button port _ _ ?' 'str str' 'D9' 'Clicked'

to 'Set Button port' _pinLabel _longPressTime {
  local 'tempPin' ('_checkPortToPin' _pinLabel)
  local 'pinLocation' ('[data:find]' tempPin _buttonPinList)
  if (pinLocation < 0) {
    return 0
  } else {
    if (_longPressTimeList != 0) {atPut pinLocation _longPressTimeList _longPressTime}
  }
}

to 'Set button port' _pinLabel _debounceDelay {
  local 'tempPin' ('_checkPortToPin' _pinLabel)
  local 'pinLocation' ('[data:find]' tempPin _buttonPinList)
  if (pinLocation < 0) {
    return 0
  } else {
    if (_debounceDelayList != 0) {atPut pinLocation _debounceDelayList _debounceDelay}
  }
}

to '_checkPortToPin' _pinLabel {
  if (_pinLabel == ('[data:toString]' 'D9')) {
    return 13
  } (_pinLabel == ('[data:toString]' 'D11')) {
    return 23
  } (_pinLabel == ('[data:toString]' 'D12')) {
    return 19
  } (_pinLabel == ('[data:toString]' 'D13')) {
    return 18
  } else {
    return -1
  }
}

to '_updateButtonLoop' {
  if (_buttonPinList != 0) {forever {
    for i (size _buttonPinList) {
      local 'pin' (at i _buttonPinList)
      local '_debounceDelay[]' (at i _debounceDelayList)
      local '_longPressTime[]' (at i _longPressTimeList)
      local 'reading' (digitalReadOp pin)
      if (reading != _buttonState) {
        _lastDebounceTime = (millisOp)
      }
      if (((millisOp) - _lastDebounceTime) > _debounceDelay[]) {
        if (reading != _buttonPressed) {
          _buttonPressed = reading
          if (_buttonPressed == (booleanConstant false)) {
            _pressStartTime = (millisOp)
          } else {
            local 'pressDuration' ((millisOp) - _pressStartTime)
            if (pressDuration > _longPressTime[]) {
              _buttonPressed = reading
              atPut i _buttonStateList ('[data:toString]' 'Long-Clicked')
              _clickCount = 0
            } else {
              if (((millisOp) - _lastClickTime) < 400) {
                _clickCount = (_clickCount + 1)
              } else {
                _clickCount = 1
              }
              _lastClickTime = (millisOp)
              if (_clickCount == 2) {
                atPut i _buttonStateList ('[data:toString]' 'Double-Clicked')
                _clickCount = 0
              } else {
                atPut i _buttonStateList ('[data:toString]' 'Clicked')
              }
            }
          }
        }
      }
      _buttonState = reading
    }
    waitMillis 15
  }
}
}

to 'is Button port' _pinLabel _stateLabel {
  if (_buttonPinList == 0) {
    _buttonPinList = ('[data:makeList]')
    _debounceDelayList = ('[data:makeList]')
    _longPressTimeList = ('[data:makeList]')
    _buttonStateList = ('[data:makeList]')
    sendBroadcast '_updateButtonLoop'
  }
  local 'tempPin' ('_checkPortToPin' _pinLabel)
  local 'pinLocation' ('[data:find]' tempPin _buttonPinList)
  if (pinLocation < 0) {
    comment 'Nếu không có trong danh sách sẽ trả về -1'
    comment 'Thêm vào danh sách'
    if (tempPin != -1) {
      '[data:addLast]' tempPin _buttonPinList
      '[data:addLast]' 50 _debounceDelayList
      '[data:addLast]' 1000 _longPressTimeList
      '[data:addLast]' ('[data:toString]' 'non') _buttonStateList
      pinLocation = (size _buttonPinList)
    }
  }
  local '_getButtonState' (at pinLocation _buttonStateList)
  sayIt _getButtonState
  if (_getButtonState == _stateLabel) {
    return (booleanConstant true)
  } else {
    return (booleanConstant false)
  }
}

script 50 50 {
to 'is Button port' {}
}

script 496 50 {
for i (size _buttonPinList) {
  sayIt _buttonPinList (at i _buttonPinList)
  waitMillis 500
}
}

script 658 509 {
whenStarted
forever {
  local 'var' ('is Button port' 'D9' 'Clicked')
}
}

script 512 798 {
to '_updateButtonLoop' {}
}

script 774 824 {
'_updateButtonLoop'
}

script 159 2477 {
'Set LED on pin' 'D10' true
waitMillis 50
'Set LED on pin' 'D10' false
waitMillis 50
}

script 637 2554 {
atPut i _buttonStateList ('[data:toString]' 'non')
}


module MKE_M01_LED_MODULE
author MinhKhanh614
version 1 0 
choices pinList D9 D10 D11 D12 D13 
description ''

  spec ' ' 'Set LED on pin' 'Set LED on pin _ to state _' 'str.pinList bool' 'D9' true
  spec ' ' 'myBlock' 'Set LED on pin _ to state _' 'str.pinList num' 'D9' 1

to 'Set LED on pin' _pin _state {
  local 'var_pin' -1
  if (_pin == 'D9') {
    var_pin = 13
  } (_pin == 'D10') {
    var_pin = 5
  } (_pin == 'D11') {
    var_pin = 23
  } (_pin == 'D12') {
    var_pin = 19
  } (_pin == 'D13') {
    var_pin = 18
  }
  if _state {
    digitalWriteOp var_pin true
  } else {
    digitalWriteOp var_pin false
  }
}

to myBlock _pin _stateInput {
  local 'var_pin' -1
  if (_pin == 'D9') {
    var_pin = 13
  } (_pin == 'D10') {
    var_pin = 5
  } (_pin == 'D11') {
    var_pin = 23
  } (_pin == 'D12') {
    var_pin = 19
  } (_pin == 'D13') {
    var_pin = 18
  }
  _stateInput = (ifExpression (_stateInput > 0) 1 0)
  if (_stateInput == 1) {
    digitalWriteOp var_pin true
  } else {
    digitalWriteOp var_pin false
  }
}


module OneButton
author minhkhanh210
version 1 1 
choices _buttonPinList D9 D10 D11 D12 D13 
choices buttonEventList clicked 'double clicked' 'long clicked' 
description 'Thư viện nút nhấn đa sự kiện cho MicroBlocks.'
variables _buttonState _lastDebounceTime _debounceDelay _buttonPin _buttonPressed _clickCallback _longPressCallback _doubleClickCallback _longPressTime _pressStartTime _lastClickTime _clickCount 

  spec ' ' 'khởi tạo nút nhấn' 'khởi tạo nút nhấn ở chân _' 'str._buttonPinList' 'D9'
  spec ' ' 'đặt debounce' 'đặt thời gian debounce là _ ms' 'num' 50
  spec ' ' 'đặt long press' 'đặt thời gian nhấn giữ là _ ms' 'num' 1000
  spec ' ' 'khi nhấn nút' 'khi nhấn nút thì _' 'any'
  spec ' ' 'khi nhấn giữ nút' 'khi nhấn giữ nút thì _' 'any'
  spec ' ' 'khi nhấn đúp nút' 'khi nhấn đúp nút thì _' 'any'
  spec ' ' 'kiểm tra nút' 'kiểm tra trạng thái nút'
  spec 'r' 'trạng thái nút' 'trạng thái nút'
  spec 'r' 'is button event' 'is button pin _ _' 'str._buttonPinList str.buttonEventList' 'D9' 'clicked'
  spec ' ' 'khởi tạo nút nhấn ở chân' 'khởi tạo nút nhấn ở chân _pinLabel _' 'str' '1'
  spec ' ' 'kiểm tra trạng thái nút' '_buttonUpdateLoop'

to 'is button pin _ _' _pinLabel _event {
  local 'pinNum' -1
  if (_pinLabel == 'D9') {
    pinNum = 13
  } true {
    v if
  } (_pinLabel == 'D10') {
    pinNum = 5
  } true {
    v if
  } (_pinLabel == 'D11') {
    pinNum = 23
  } true {
    v if
  } (_pinLabel == 'D12') {
    pinNum = 19
  } true {
    v if
  } (_pinLabel == 'D13') {
    pinNum = 18
  }
  if (pinNum != _buttonPin) {
    return 0
  }
  if (_event == 'clicked') {
    return (_buttonPressed == 0)
  } true {
    v if
  } (_event == 'long clicked') {
    return ('_buttonPressed' '==' 0 && (millisSince 0 '-' _pressStartTime) '>' _longPressTime)
  } true {
    v if
  } (_event == 'double clicked') {
    return (_clickCount == 2)
  } else {
    return 0
  }
}

to 'khi nhấn giữ nút thì' _handler {
  _longPressCallback = _handler
}

to 'khi nhấn nút thì' _handler {
  _clickCallback = _handler
}

to 'khi nhấn đúp nút thì' _handler {
  _doubleClickCallback = _handler
}

to 'khởi tạo nút nhấn ở chân' _pinLabel {
  if (_pinLabel == ('[data:toString]' 'D9')) {
    _buttonPin = 13
  } (_pinLabel == ('[data:toString]' 'D11')) {
    _buttonPin = 23
  } (_pinLabel == ('[data:toString]' 'D12')) {
    _buttonPin = 19
  } (_pinLabel == ('[data:toString]' 'D13')) {
    _buttonPin = 18
  }
}

to 'kiểm tra trạng thái nút' {
  _debounceDelay = 50
  _longPressTime = 1000
}

to 'trạng thái nút' {
  return _buttonPressed
}

to 'đặt thời gian debounce là' _ms {
  _debounceDelay = _ms
}

to 'đặt thời gian nhấn giữ là' _ms {
  _longPressTime = _ms
}


module Servo Output
author MicroBlocks
version 1 3 
tags servo motor angle rotation position 
description 'Control both positional (angle) and rotational servo motors.
'
variables _servoPin _servoPulseWidth 

  spec ' ' 'setServoAngle' 'set servo _ to _ degrees (-90 to 90)' 'num num' 1 90
  spec ' ' 'setServoSpeed' 'set servo _ to speed _ (-100 to 100)' 'num num' 1 100
  spec ' ' 'stopServo' 'stop servo _' 'num' 1
  spec 'r' '_servoIndex' '_servoIndex _' 'num' 1
  spec ' ' '_servoPulse' '_servoPulse pin _ usecs _' 'num num' 1 1500
  spec ' ' '_servoUpdateLoop' '_servoUpdateLoop'

to '_servoIndex' which {
  if (_servoPin == 0) {
    _servoPin = ('[data:makeList]')
    _servoPulseWidth = ('[data:makeList]')
    sendBroadcast '_servoUpdateLoop'
  }
  local 'i' ('[data:find]' which _servoPin)
  if (i < 0) {
    comment 'Add new pin'
    '[data:addLast]' which _servoPin
    '[data:addLast]' '1500' _servoPulseWidth
    i = (size _servoPin)
  }
  return i
}

to '_servoPulse' pin usecs {
  if (usecs == 0) {
    comment 'Servo stopped; do nothing'
    return 0
  }
  usecs = (maximum 850 (minimum usecs 2150))
  comment 'Split wait into a long wait followed by a wait of <= 30 usecs for greater accuracy'
  local 'endTime' ((microsOp) + usecs)
  digitalWriteOp pin true
  waitMicros (usecs - 30)
  waitMicros (endTime - (microsOp))
  digitalWriteOp pin false
}

to '_servoUpdateLoop' {
  forever {
    if (_servoPin != 0) {
      comment 'If the _servoPin list is not 0, update the servos'
      for i (size _servoPin) {
        local 'pin' (at i _servoPin)
        local 'usecs' (at i _servoPulseWidth)
        if (and (pin >= 0) (usecs != 0)) {
          '_servoPulse' pin usecs
        }
      }
      waitMillis 15
    }
  }
}

to setServoAngle which degrees optionalReverse {
  local 'reversed' false
  if ((pushArgCount) > 2) {
    reversed = optionalReverse
  }
  if reversed {
    degrees = (0 - degrees)
  }
  local 'pulseWidth' (1500 - (10 * degrees))
  if ('[io:hasServo]') {
    '[io:setServo]' which pulseWidth
  } else {
    atPut ('_servoIndex' which) _servoPulseWidth pulseWidth
  }
}

to setServoSpeed which speed optionalReverse {
  local 'reversed' false
  if ((pushArgCount) > 2) {
    reversed = optionalReverse
  }
  if reversed {
    speed = (0 - speed)
  }
  local 'pulseWidth' (1500 - (10 * speed))
  if ((absoluteValue speed) < 2) {
    pulseWidth = 0
  }
  if ('[io:hasServo]') {
    '[io:setServo]' which pulseWidth
  } else {
    atPut ('_servoIndex' which) _servoPulseWidth pulseWidth
  }
}

to stopServo which {
  if ('[io:hasServo]') {
    '[io:setServo]' which 0
  } else {
    atPut ('_servoIndex' which) _servoPulseWidth 0
  }
}

