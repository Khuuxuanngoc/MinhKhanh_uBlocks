module main
author unknown
version 1 0 
description ''
variables speed time minDeg maxDeg 

  spec ' ' 'run _ _ _ _' 'runDC _ _' 'auto auto' '' ''
  spec ' ' 'runRC _ _' 'runRC _ _' 'auto auto' '' ''

to 'run _ _ _ _' speed time {
  repeat 1 {
    runMotor 0 'A' 'forward' speed
    runMotor 0 'B' 'forward' speed
    LCD1602_write ('[data:join]' 'MA: ' 'forward ' speed '% ') 1
    LCD1602_write ('[data:join]' 'MB: ' 'forward ' speed '% ') 2
    waitMillis time
    'stopMotorDC I2C | Address' 0 'A'
    'stopMotorDC I2C | Address' 0 'B'
    LCD1602_write ('[data:join]' 'MA: ' 'stop' ' ') 1
    LCD1602_write ('[data:join]' 'MB: ' 'stop' ' ') 2
    waitMillis time
    runMotor 0 'A' 'backward' speed
    runMotor 0 'B' 'backward' speed
    LCD1602_write ('[data:join]' 'MA: ' 'backward ' speed '% ') 1
    LCD1602_write ('[data:join]' 'MB: ' 'backward ' speed '% ') 2
    waitMillis time
    'stopMotorDC I2C | Address' 0 'A'
    'stopMotorDC I2C | Address' 0 'B'
    LCD1602_write ('[data:join]' 'MA: ' 'stop' ' ') 1
    LCD1602_write ('[data:join]' 'MB: ' 'stop' ' ') 2
    waitMillis time
    runMotor 0 'A' 'backward' speed
    runMotor 0 'B' 'forward' speed
    LCD1602_write ('[data:join]' 'MA: ' 'backward ' speed '% ') 1
    LCD1602_write ('[data:join]' 'MB: ' 'forward ' speed '% ') 2
    waitMillis time
    'stopMotorDC I2C | Address' 0 'A'
    'stopMotorDC I2C | Address' 0 'B'
    LCD1602_write ('[data:join]' 'MA: ' 'stop' ' ') 1
    LCD1602_write ('[data:join]' 'MB: ' 'stop' ' ') 2
    waitMillis time
    runMotor 0 'A' 'forward' speed
    runMotor 0 'B' 'backward' speed
    LCD1602_write ('[data:join]' 'MA: ' 'forward ' speed '% ') 1
    LCD1602_write ('[data:join]' 'MB: ' 'backward ' speed '% ') 2
    waitMillis time
    'stopMotorDC I2C | Address' 0 'A'
    'stopMotorDC I2C | Address' 0 'B'
    LCD1602_write ('[data:join]' 'MA: ' 'stop' ' ') 1
    LCD1602_write ('[data:join]' 'MB: ' 'stop' ' ') 2
    waitMillis time
  }
}

to 'runRC _ _' minDeg maxDeg {
  for i ('[data:range]' minDeg maxDeg) {
    'runMotorRC I2C | Address' 0 'S1' i
    LCD1602_write ('[data:join]' 'S1: ' 'rotate ' i '') 1
    waitMillis 100
  }
  'freeMotorRC I2C | Address' 0 'S1'
  for i ('[data:range]' maxDeg minDeg) {
    'runMotorRC I2C | Address' 0 'S1' i
    LCD1602_write ('[data:join]' 'S1: ' 'rotate ' i '') 1
    waitMillis 100
  }
  'freeMotorRC I2C | Address' 0 'S1'
  for i ('[data:range]' minDeg maxDeg) {
    'runMotorRC I2C | Address' 0 'S2' i
    LCD1602_write ('[data:join]' 'S2: ' 'rotate ' i '') 2
    waitMillis 100
  }
  'freeMotorRC I2C | Address' 0 'S2'
  for i ('[data:range]' maxDeg minDeg) {
    'runMotorRC I2C | Address' 0 'S2' i
    LCD1602_write ('[data:join]' 'S2: ' 'rotate ' i '') 2
    waitMillis 100
  }
  'freeMotorRC I2C | Address' 0 'S2'
}

script 50 50 {
whenStarted
maxDeg = 115
minDeg = 45
speed = 75
time = 2000
LCD1602_write 'Test M10' 1
LCD1602_write 'Wait ' 2
for i ('[data:range]' 4 0) {
  LCD_write_at_r_and_c ('[data:join]' i 's' ' ') 6 2
  waitMillis 1000
}
LCD1602_clear
'run _ _ _ _' speed time
LCD1602_clear
'runRC _ _' minDeg maxDeg
LCD1602_write 'Test M10 Done' 1
LCD1602_write 'Wait ' 2
for i ('[data:range]' 4 0) {
  LCD_write_at_r_and_c ('[data:join]' i 's ' 'to clear') 6 2
  waitMillis 1000
}
LCD1602_clear
}

script 50 764 {
to 'runRC _ _' {}
}

script 50 1760 {
to 'run _ _ _ _' {}
}


module MKE_I2C_MOTOR_DRIVER Comm
author MinhKhanh210
version 1 1 
choices motorDC A B 
choices direct forward backward 
choices motorRC S1 S2 
choices address '0' '1' '2' '3' '4' 
description 'Lưu ý khi sử dụng với ESP32S3, cần setup 2 chân I2C
SDA và SCL. 
Arduino lib mặc định là SDA: 8  SCL:9.
ESP32S là SDA:21 SCL:22. 
Sử dụng hàm Set cho sẵn trong thư viện hoặc có thể tùy
biến.
'
variables _pulseMax _pusleMin _listDriverManager _list_position_driver 

  spec ' ' '_MKE-M10 Configuration' '_MKE-M10 | register new driver address _' 'menu.address' 0
  spec ' ' 'runMotor' 'runMotorDC I2C | Address _ Motor _ move _ at power (%) _' 'menu.address menu.motorDC menu.direct num' 0 'A' 'forward' 50
  spec ' ' 'stopMotorDC I2C | Address' 'stopMotorDC I2C | Address _ Motor _' 'menu.address menu.motorDC' 0 'A'
  space
  spec ' ' 'runMotorRC I2C | Address' 'runMotorRC I2C | Address _ Servo _ angle as (0° ~ 180°) _' 'menu.address menu.motorRC num' 0 'S1' 90
  spec ' ' 'freeMotorRC I2C | Address' 'freeMotorRC I2C | Address _ Servo _' 'menu.address menu.motorRC' 0 'S1'
  space
  spec ' ' 'Set this driver address to' 'Set this driver address to _' 'menu.address' 0
  spec ' ' '[sensors:i2cSetClockSpeed]' 'set i2c clock speed _' 'num' 400000
  spec ' ' '[sensors:i2cSetPins]' 'set i2c pins SDA _ SCL _' 'num num' 4 5
  spec ' ' 'Set max pulse (microsecond)' 'Set max pulse value (microsecond) _ for Servo _ in address _' 'auto menu.motorRC menu.address' 2350 'S1' 0
  spec ' ' 'Set min pulse (microsecond)' 'Set min pulse value (microsecond) _ for Servo _ in address _' 'auto menu.motorRC menu.address' 460 'S1' 0
  space
  spec 'r' '_addrConvert' '_addrConvert _' 'auto' 0
  spec 'r' '_directConvert' '_directConvert _' 'str' 'forward'
  spec 'r' '_motorConvert' '_motorConvert _' 'str' 'A'
  spec 'r' '_powerConvert' '_powerConvert _' 'num' 50
  spec 'r' '_pulseDegConvert' '_pulseDegConvert _' 'auto' 90
  space
  spec ' ' '_sendI2cData _ _' '_sendI2cData _ and _' 'auto auto' '5_bytes_data' '1_byte_check_sum'
  spec 'r' '_checkSum' '_checkSum _' 'auto' 'aByteArray'
  spec 'r' '_getDriverPosition _' '_getDriverPosition _' 'menu.address' 0

to 'Set max pulse (microsecond)' _pulseMaxInput _motorWhich _addressWhich {
  _pulseMax = _pulseMaxInput
}

to 'Set min pulse (microsecond)' _pusleMinInput _motorWhich _addressWhich {
  _pusleMin = _pusleMinInput
}

to 'Set this driver address to' _address {
  local 'new_addr_convert' ('_addrConvert' _address)
  local 'count_device_exists' ('[data:makeList]')
  for curent_addr ('[data:range]' 0 4) {
    if ('[sensors:i2cExists]' ('_addrConvert' curent_addr)) {'[data:addLast]' ('_addrConvert' curent_addr) count_device_exists}
  }
  if ((size count_device_exists) > 1) {
    sayIt 'To many devices, must be 1.'
    return 0
  } ((size count_device_exists) < 1) {
    sayIt 'No devices, must be 1.'
    return 0
  } else {
    if ((at 1 count_device_exists) == new_addr_convert) {
      sayIt 'This is the current address.'
      return 0
    } else {
      '[sensors:i2cWrite]' (at 1 count_device_exists) ('[data:makeList]' new_addr_convert 2 0 0 0 (new_addr_convert + 2))
      waitMillis 500
      local 'receive_data' ('[data:newByteArray]' 6 0)
      '[sensors:i2cRead]' new_addr_convert receive_data
      for i (size receive_data) {
        sayIt (at i receive_data)
        waitMillis 500
        if ((at i receive_data) == new_addr_convert) {
          sayIt 'success'
          return ('[sensors:i2cExists]' new_addr_convert)
        } else {
          sayIt 'fail'
        }
      }
    }
  }
}

to '_MKE-M10 Configuration' newDriver {
  local 'addr' ('_addrConvert' newDriver)
  if (isType addr 'boolean') {
    sayIt 'Invalid address'
    return 0
  }
  if (_listDriverManager == 0) {
    _listDriverManager = ('[data:makeList]')
    _list_position_driver = ('[data:makeList]')
    '[data:addLast]' ('[data:makeList]' addr 0 0 0 0 460 2350 90 460 2350 90) _listDriverManager
    comment 'Cấu trúc dữ liệu của 1 driver bao như sau:
[ Driver:addr | A:dir | A:pwr | B:dir | B:dir | S1:max | S1:min | S1:deg | S2:max | S2:min | S2:deg ]
vị trí từ 1 tới 11.  '
    '[data:addLast]' addr _list_position_driver
    comment 'Tạo danh sách hiển thị vị trí của driver từ 1 đến 5'
    sayIt '1st register, max register is 5'
    return 0
  } else {
    for i (size _listDriverManager) {
      if ((at 1 (at i _listDriverManager)) == addr) {
        sayIt 'Driver at this address already exists'
        return 0
      }
    }
    '[data:addLast]' ('[data:makeList]' addr 0 0 0 0 460 2350 90 460 2350 90) _listDriverManager
    '[data:addLast]' addr _list_position_driver
    sayIt ('[data:find]' (at 'last' _listDriverManager) _listDriverManager) 'register, max is 5'
    return 0
  }
}

to '_addrConvert' _addrIn {
  if (not (isType _addrIn 'number')) {_addrIn = ('[data:convertType]' _addrIn 'number')}
  for i ('[data:range]' 0 4) {
    if (_addrIn == i) {return (64 + i)}
  }
}

to '_checkSum' byteArray {
  local 'checkSum' 0
  for i (size byteArray) {
    checkSum = (checkSum + (at i byteArray))
  }
  return checkSum
}

to '_directConvert' _directIn {
  return (ifExpression (_directIn == ('[data:toString]' 'forward')) 1 (ifExpression (_directIn == ('[data:toString]' 'backward')) 0 (booleanConstant false)))
}

to '_getDriverPosition _' addr {
  return ('[data:find]' ('_addrConvert' addr) _list_position_driver)
}

to '_motorConvert' _motorIn {
  return (ifExpression (_motorIn == ('[data:toString]' 'A')) 0 (ifExpression (_motorIn == ('[data:toString]' 'B')) 1 (ifExpression (_motorIn == ('[data:toString]' 'S1')) 1 (ifExpression (_motorIn == ('[data:toString]' 'S2')) 2 (booleanConstant false)))))
}

to '_powerConvert' _powerIn {
  return ('[misc:rescale]' _powerIn 0 100 0 255)
}

to '_pulseDegConvert' _DegIn {
  return ('[misc:rescale]' _DegIn 0 180 460 2350)
}

to '_sendI2cData _ _' data checkSumCalc {
  '[data:addLast]' checkSumCalc data
  waitMicros 15
  '[sensors:i2cWrite]' (at 1 data) ('[data:asByteArray]' data)
}

to 'freeMotorRC I2C | Address' _address _motorWhich {
  local 'tempData' ('[data:makeList]' ('_addrConvert' _address) 0 ('_motorConvert' _motorWhich) ((3000 >> 8) & (hexToInt 'FF')) (3000 & (hexToInt 'FF')))
  '_sendI2cData _ _' tempData (('_checkSum' tempData) & (hexToInt 'FF'))
}

to runMotor _addr _motorWhich _direction _powerPercent {
  local 'tempData' ('[data:makeList]' ('_addrConvert' _addr) 1 ('_motorConvert' _motorWhich) ('_powerConvert' _powerPercent) ('_directConvert' _direction))
  '_sendI2cData _ _' tempData (('_checkSum' tempData) & (hexToInt 'FF'))
}

to 'runMotorRC I2C | Address' _address _motorWhich _angle {
  local 'tempData' ('[data:makeList]' ('_addrConvert' _address) 0 ('_motorConvert' _motorWhich) ((('_pulseDegConvert' _angle) >> 8) & (hexToInt 'FF')) (('_pulseDegConvert' _angle) & (hexToInt 'FF')))
  '_sendI2cData _ _' tempData (('_checkSum' tempData) & (hexToInt 'FF'))
}

to 'stopMotorDC I2C | Address' _addresss _motorWhich {
  runMotor _addresss _motorWhich 'forward' 0
}


module MKE_M07_M08_I2C_LCD
author MinhKhanh210
version 1 2 
depends sensorPrims 
description ''
variables _LCD1602_ADDR _LCD1602_LINE1 _LCD1602_LINE2 _LCD1602_LOCK_MSECS _LCD2004_LINE3 _LCD2004_LINE4 

  spec ' ' 'LCD1602_write' 'LCD I2C | Print _ at Row _' 'str num' 'MakerEDU' 1
  spec ' ' 'LCD1602_write_field' 'LCD I2C | Print _ at Row _ and Columm _ to Columm _' 'str num num num' 'labVN' 1 6 10
  spec ' ' 'LCD_write_at_r_and_c' 'LCD I2C | Print _ at Columm _ and Row _' 'auto num num' 'MakerlabVN' 1 1
  space
  spec ' ' 'LCD1602_clear' 'LCD I2C | Clear all'
  space
  spec 'r' 'LCD1602_isConnected' 'is LCD connected?'
  spec ' ' 're-initialize' 're-initialize'
  space
  spec 'r' '_LCD1602 init' '_LCD1602 init'
  spec ' ' '_LCD1602 send' '_LCD1602 send byte _ mode _' 'num num' 10 1
  spec ' ' '_LCD1602 toggle enable' '_LCD1602 toggle enable _' 'num' 10
  spec ' ' 'LCD1602_write_buffer' '_write_buffer _' 'auto' 0

to LCD1602_clear {
  if (not ('_LCD1602 init')) {return}
  waitUntil (((millisOp) - _LCD1602_LOCK_MSECS) > 500)
  _LCD1602_LOCK_MSECS = (millisOp)
  _LCD1602_LINE1 = ('[data:newByteArray]' 20 32)
  _LCD1602_LINE2 = ('[data:newByteArray]' 20 32)
  _LCD2004_LINE3 = ('[data:newByteArray]' 20 32)
  _LCD2004_LINE4 = ('[data:newByteArray]' 20 32)
  '_LCD1602 send' 1 0
  _LCD1602_LOCK_MSECS = 0
}

to LCD1602_isConnected {
  return ('_LCD1602 init')
}

to LCD1602_write string line {
  LCD1602_write_field string line 1 20
}

to LCD1602_write_buffer line {
  local 'bytes' 0
  if (line == 1) {
    '_LCD1602 send' (hexToInt '80') 0
    bytes = _LCD1602_LINE1
  } (line == 2) {
    '_LCD1602 send' (hexToInt 'C0') 0
    bytes = _LCD1602_LINE2
  } (line == 3) {
    '_LCD1602 send' (hexToInt '94') 0
    bytes = _LCD2004_LINE3
  } else {
    if (line == 4) {
      '_LCD1602 send' (hexToInt 'D4') 0
      bytes = _LCD2004_LINE4
    }
  }
  for b bytes {
    '_LCD1602 send' b 1
  }
}

to LCD1602_write_field string line start end {
  if (not ('_LCD1602 init')) {return}
  if (start < 1) {
    sayIt 'first columm must start with 1'
    return
  }
  if (end > 20) {
    end = 20
  }
  string = ('[data:join]' '' string)
  if (line == 1) {
    bytes = _LCD1602_LINE1
  } (line == 2) {
    bytes = _LCD1602_LINE2
  } (line == 3) {
    bytes = _LCD2004_LINE3
  } else {
    if (line == 4) {bytes = _LCD2004_LINE4}
  }
  waitUntil (((millisOp) - _LCD1602_LOCK_MSECS) > 500)
  _LCD1602_LOCK_MSECS = (millisOp)
  local 'count' ((end - start) + 1)
  for i count {
    local 'char' 32
    if (i <= (size string)) {
      char = ('[data:unicodeAt]' i string)
      if (char > 127) {
        char = 32
      }
      atPut ((start - 1) + i) bytes char
    } else {
      atPut ((start - 1) + i) bytes char
    }
  }
  LCD1602_write_buffer line
  _LCD1602_LOCK_MSECS = 0
}

to LCD_write_at_r_and_c string col row {
  LCD1602_write_field string row col ((size string) + col)
}

to '_LCD1602 init' {
  comment 'Return true if already initialized'
  if (_LCD1602_ADDR != 0) {
    return true
  }
  comment 'Use slow I2C speed'
  '[sensors:i2cSetClockSpeed]' 100000
  comment 'Try two common I2C addresses and
use the one that gets a response'
  _LCD1602_ADDR = (hexToInt '27')
  if ((i2cGet _LCD1602_ADDR 0) < 0) {
    _LCD1602_ADDR = (hexToInt '3F')
  }
  if ((i2cGet _LCD1602_ADDR 0) < 0) {
    _LCD1602_ADDR = 0
    comment 'LCD panel not found'
    return false
  }
  _LCD1602_LINE1 = ('[data:newByteArray]' 20 32)
  _LCD1602_LINE2 = ('[data:newByteArray]' 20 32)
  _LCD2004_LINE3 = ('[data:newByteArray]' 20 32)
  _LCD2004_LINE4 = ('[data:newByteArray]' 20 32)
  comment 'Initialize display'
  '_LCD1602 send' (hexToInt '33') 0
  '_LCD1602 send' (hexToInt '32') 0
  '_LCD1602 send' (hexToInt '06') 0
  '_LCD1602 send' (hexToInt '0C') 0
  '_LCD1602 send' (hexToInt '28') 0
  '_LCD1602 send' (hexToInt '01') 0
  '[sensors:i2cSetClockSpeed]' 400000
  waitMillis 250
  return true
}

to '_LCD1602 send' bits mode {
  comment 'Use slow I2C speed'
  '[sensors:i2cSetClockSpeed]' 100000
  local '_LCD1602 BACKLIGHT' (hexToInt '8')
  local 'high bits' ((mode | (bits & (hexToInt 'F0'))) | (v '_LCD1602 BACKLIGHT'))
  local 'low bits' ((mode | ((bits << 4) & (hexToInt 'F0'))) | (v '_LCD1602 BACKLIGHT'))
  '[sensors:i2cWrite]' _LCD1602_ADDR (v 'high bits')
  '_LCD1602 toggle enable' (v 'high bits')
  '[sensors:i2cWrite]' _LCD1602_ADDR (v 'low bits')
  '_LCD1602 toggle enable' (v 'low bits')
  comment 'Revert to fast I2C speed'
  '[sensors:i2cSetClockSpeed]' 400000
  waitMillis 1
}

to '_LCD1602 toggle enable' bits {
  local '_LCD1602 ENABLE' 4
  waitMicros 5
  '[sensors:i2cWrite]' _LCD1602_ADDR (bits | (v '_LCD1602 ENABLE'))
  waitMicros 5
  '[sensors:i2cWrite]' _LCD1602_ADDR (bits & ('~' (v '_LCD1602 ENABLE')))
  waitMicros 5
}

to 're-initialize' {
  _LCD1602_ADDR = 0
}

