module main
author unknown
version 1 0 
description ''
variables volume_percent 

script 54 50 {
whenStarted
volume_percent = 75
LCD1602_write 'M11 Test' 1
mp3_initialize 13 12
LCD1602_write 'M11 Initialize' 1
waitMillis 1000
LCD1602_write ('[data:join]' 'Set volume to ' volume_percent) 2
waitMillis 1000
mp3_setVolume volume_percent
LCD1602_write 'M11 Play next' 1
mp3_nextTrack
for i ('[data:range]' 5 0) {
  LCD1602_write ('[data:join]' 'Playing ' i 's ') 2
  waitMillis 1000
}
LCD1602_write 'Pause' 2
waitMillis 1000
mp3_pause
LCD1602_clear
LCD1602_write 'M11 Test Done' 1
waitMillis 2000
LCD1602_clear
}


module MKE_M07_M08_I2C_LCD
author MinhKhanh210
version 1 2 
depends sensorPrims 
description ''
variables _LCD1602_ADDR _LCD1602_LINE1 _LCD1602_LINE2 _LCD1602_LOCK_MSECS _LCD2004_LINE3 _LCD2004_LINE4 

  spec ' ' 'LCD1602_write' 'LCD I2C | Print _ at Row _' 'str num' 'MakerEDU' 1
  spec ' ' 'LCD1602_write_field' 'LCD I2C | Print _ at Row _ and Columm _ to Columm _' 'str num num num' 'labVN' 1 6 10
  spec ' ' 'LCD_write_at_r_and_c' 'LCD I2C | Print _ at Columm _ and Row _' 'auto num num' 'MakerlabVN' 1 1
  space
  spec ' ' 'LCD1602_clear' 'LCD I2C | Clear all'
  space
  spec 'r' 'LCD1602_isConnected' 'is LCD connected?'
  spec ' ' 're-initialize' 're-initialize'
  space
  spec 'r' '_LCD1602 init' '_LCD1602 init'
  spec ' ' '_LCD1602 send' '_LCD1602 send byte _ mode _' 'num num' 10 1
  spec ' ' '_LCD1602 toggle enable' '_LCD1602 toggle enable _' 'num' 10
  spec ' ' 'LCD1602_write_buffer' '_write_buffer _' 'auto' 0

to LCD1602_clear {
  if (not ('_LCD1602 init')) {return}
  waitUntil (((millisOp) - _LCD1602_LOCK_MSECS) > 500)
  _LCD1602_LOCK_MSECS = (millisOp)
  _LCD1602_LINE1 = ('[data:newByteArray]' 20 32)
  _LCD1602_LINE2 = ('[data:newByteArray]' 20 32)
  _LCD2004_LINE3 = ('[data:newByteArray]' 20 32)
  _LCD2004_LINE4 = ('[data:newByteArray]' 20 32)
  '_LCD1602 send' 1 0
  _LCD1602_LOCK_MSECS = 0
}

to LCD1602_isConnected {
  return ('_LCD1602 init')
}

to LCD1602_write string line {
  LCD1602_write_field string line 1 20
}

to LCD1602_write_buffer line {
  local 'bytes' 0
  if (line == 1) {
    '_LCD1602 send' (hexToInt '80') 0
    bytes = _LCD1602_LINE1
  } (line == 2) {
    '_LCD1602 send' (hexToInt 'C0') 0
    bytes = _LCD1602_LINE2
  } (line == 3) {
    '_LCD1602 send' (hexToInt '94') 0
    bytes = _LCD2004_LINE3
  } else {
    if (line == 4) {
      '_LCD1602 send' (hexToInt 'D4') 0
      bytes = _LCD2004_LINE4
    }
  }
  for b bytes {
    '_LCD1602 send' b 1
  }
}

to LCD1602_write_field string line start end {
  if (not ('_LCD1602 init')) {return}
  if (start < 1) {
    sayIt 'first columm must start with 1'
    return
  }
  if (end > 20) {
    end = 20
  }
  string = ('[data:join]' '' string)
  if (line == 1) {
    bytes = _LCD1602_LINE1
  } (line == 2) {
    bytes = _LCD1602_LINE2
  } (line == 3) {
    bytes = _LCD2004_LINE3
  } else {
    if (line == 4) {bytes = _LCD2004_LINE4}
  }
  waitUntil (((millisOp) - _LCD1602_LOCK_MSECS) > 500)
  _LCD1602_LOCK_MSECS = (millisOp)
  local 'count' ((end - start) + 1)
  for i count {
    local 'char' 32
    if (i <= (size string)) {
      char = ('[data:unicodeAt]' i string)
      if (char > 127) {
        char = 32
      }
      atPut ((start - 1) + i) bytes char
    } else {
      atPut ((start - 1) + i) bytes char
    }
  }
  LCD1602_write_buffer line
  _LCD1602_LOCK_MSECS = 0
}

to LCD_write_at_r_and_c string col row {
  LCD1602_write_field string row col ((size string) + col)
}

to '_LCD1602 init' {
  comment 'Return true if already initialized'
  if (_LCD1602_ADDR != 0) {
    return true
  }
  comment 'Use slow I2C speed'
  '[sensors:i2cSetClockSpeed]' 100000
  comment 'Try two common I2C addresses and
use the one that gets a response'
  _LCD1602_ADDR = (hexToInt '27')
  if ((i2cGet _LCD1602_ADDR 0) < 0) {
    _LCD1602_ADDR = (hexToInt '3F')
  }
  if ((i2cGet _LCD1602_ADDR 0) < 0) {
    _LCD1602_ADDR = 0
    comment 'LCD panel not found'
    return false
  }
  _LCD1602_LINE1 = ('[data:newByteArray]' 20 32)
  _LCD1602_LINE2 = ('[data:newByteArray]' 20 32)
  _LCD2004_LINE3 = ('[data:newByteArray]' 20 32)
  _LCD2004_LINE4 = ('[data:newByteArray]' 20 32)
  comment 'Initialize display'
  '_LCD1602 send' (hexToInt '33') 0
  '_LCD1602 send' (hexToInt '32') 0
  '_LCD1602 send' (hexToInt '06') 0
  '_LCD1602 send' (hexToInt '0C') 0
  '_LCD1602 send' (hexToInt '28') 0
  '_LCD1602 send' (hexToInt '01') 0
  '[sensors:i2cSetClockSpeed]' 400000
  waitMillis 250
  return true
}

to '_LCD1602 send' bits mode {
  comment 'Use slow I2C speed'
  '[sensors:i2cSetClockSpeed]' 100000
  local '_LCD1602 BACKLIGHT' (hexToInt '8')
  local 'high bits' ((mode | (bits & (hexToInt 'F0'))) | (v '_LCD1602 BACKLIGHT'))
  local 'low bits' ((mode | ((bits << 4) & (hexToInt 'F0'))) | (v '_LCD1602 BACKLIGHT'))
  '[sensors:i2cWrite]' _LCD1602_ADDR (v 'high bits')
  '_LCD1602 toggle enable' (v 'high bits')
  '[sensors:i2cWrite]' _LCD1602_ADDR (v 'low bits')
  '_LCD1602 toggle enable' (v 'low bits')
  comment 'Revert to fast I2C speed'
  '[sensors:i2cSetClockSpeed]' 400000
  waitMillis 1
}

to '_LCD1602 toggle enable' bits {
  local '_LCD1602 ENABLE' 4
  waitMicros 5
  '[sensors:i2cWrite]' _LCD1602_ADDR (bits | (v '_LCD1602 ENABLE'))
  waitMicros 5
  '[sensors:i2cWrite]' _LCD1602_ADDR (bits & ('~' (v '_LCD1602 ENABLE')))
  waitMicros 5
}

to 're-initialize' {
  _LCD1602_ADDR = 0
}


module MKE_M11_UART_MP3_PLAYER Output
author MinhKhanh210
version 1 14 
choices mp3PlayerType DFRobot 
description ''
variables _mp3UseChecksum _mp3Pin _mp3RxPin _mp3Status 

  spec ' ' 'mp3_initialize' 'M11 MP3 Player | Initialize TX pin _ RX pin _' 'num num' 43 44
  spec ' ' 'mp3_setVolume' 'M11 MP3 Player | Set volume to _ %' 'num' 20
  space
  spec ' ' 'mp3_playTrack' 'M11 MP3 Player | Play file number _' 'num' 1
  spec ' ' 'mp3_playTrackUntilDone' 'M11 MP3 Player | Play file number _ until done' 'num' 1
  space
  spec ' ' 'mp3_nextTrack' 'M11 MP3 Player | Play Next'
  spec ' ' 'mp3_repeatAllInFolder' 'M11 MP3 Player | Repeat all in folder _' 'num' 1
  space
  spec ' ' 'mp3_pause' 'M11 MP3 Player | Pause'
  spec ' ' 'mp3_resume' 'M11 MP3 Player | Start (Play continues)'
  space
  spec ' ' '_mp3_sendMP3Cmd' '_mp3_sendMP3Cmd _ _ _' 'auto num num' '0x0C' 0 0
  spec 'r' '_mp3_timeForResponse' '_mp3_timeForResponse timeout _ msecs' 'auto' 1000

to '_mp3_sendMP3Cmd' cmd arg1 arg2 {
  if (_mp3UseChecksum == 0) {
    sayIt 'MP3 Player is not initialized'
    return 0
  }
  if _mp3UseChecksum {
    comment 'Include checksum (10 bytes total)'
    local 'msg' ('[data:makeList]' (hexToInt '7E') (hexToInt 'FF') 6 (hexToInt cmd) 0 arg1 arg2 0 0 (hexToInt 'EF'))
    local 'sum' 0
    for i 6 {
      sum += (at (i + 1) msg)
    }
    sum = (65536 - sum)
    atPut 8 msg ((sum >> 8) & 255)
    atPut 9 msg (sum & 255)
  } else {
    comment 'No checksum (8 bytes total)'
    local 'msg' ('[data:makeList]' (hexToInt '7E') (hexToInt 'FF') 6 (hexToInt cmd) 0 arg1 arg2 (hexToInt 'EF'))
  }
  comment 'Send the command'
  for byte msg {
    '[io:softWriteByte]' byte _mp3Pin 9600
  }
  comment 'Leave some time for MP3 chip to process command'
  waitMillis 5
}

to '_mp3_timeForResponse' timeout {
  comment 'Wait for a response on _mp3RxPin for up to timeout milliseconds.
Note: a low value on _mp3RxPin is the start of a response message.
We do not read the actual message but wait 20 bytes worth of time.'
  if (_mp3RxPin < 0) {
    comment 'No _mp3RxPin'
    return -1
  }
  local 'startMSecs' (millisOp)
  local 'elapsed' 0
  repeatUntil (or (not (digitalReadOp _mp3RxPin)) (elapsed > timeout)) {
    elapsed = (millisSince startMSecs)
  }
  return elapsed
}

to mp3_initialize pin optionalRxPin {
  _mp3UseChecksum = ('Octopus' != 4)
  _mp3Pin = pin
  _mp3RxPin = -1
  if ((pushArgCount) > 2) {
    _mp3RxPin = optionalRxPin
  }
  comment 'Reset the MP3 player'
  '_mp3_sendMP3Cmd' '0x0C' 0 0
  if (_mp3RxPin < 0) {
    comment 'No _mp3RxPin; assume ok'
    _mp3Status = 'ok'
    waitMillis 1000
  } else {
    comment 'Has _mp3RxPin, determine MP3 player status'
    if (('_mp3_timeForResponse' 1000) < 100) {
      _mp3Status = 'no card'
      return 0
    }
    waitMillis 500
    comment 'Try to play a non-existent track; should respond in under 800 msecs.
Times out when MP3 switch is in "files" mode.'
    mp3_playTrack 87 87
    if (('_mp3_timeForResponse' 800) >= 800) {
      _mp3Status = 'files mode'
    } else {
      _mp3Status = 'ok'
    }
    waitMillis 500
  }
}

to mp3_nextTrack {
  comment 'Skip to the next track in the current folder, wrapping back to the first track.'
  mp3_pause
  comment 'Disable folder repeat'
  '_mp3_sendMP3Cmd' '0x08' 0 0
  waitMillis 50
  '_mp3_sendMP3Cmd' '0x01' 0 0
}

to mp3_pause {
  '_mp3_sendMP3Cmd' '0x0E' 0 0
}

to mp3_playTrack trackNum folderNum {
  comment 'Play the given track in the given folder.
If folder is 0, play the given track at the top level of the SD card.
Folder names must start with two digits, 01-99.
Track names in a folder must start with three digits, 001-999.
Track names at the top level must start with four digits, 0001-9999.
This sets the folder for the "play next track in folder" command.'
  if (folderNum < 1) {
    comment 'Play top-level track (e.g. 0001)'
    '_mp3_sendMP3Cmd' '0x03' 0 trackNum
  } else {
    comment 'Play track in folder'
    '_mp3_sendMP3Cmd' '0x0F' folderNum trackNum
    comment 'Hack: Send command twice to increase reliability on MakerPort v1.00'
    '_mp3_sendMP3Cmd' '0x0F' folderNum trackNum
  }
}

to mp3_playTrackUntilDone trackNum folderNum {
  if (_mp3RxPin < 0) {
    sayIt 'To use this feature, set the RX pin in "mp3 initialize".'
    return 0
  }
  if (_mp3Status != 'ok') {
    sayIt 'MP3 Player is not available or the micro SD card is not inserted.'
    return 0
  }
  mp3_playTrack trackNum folderNum
  if (_mp3RxPin >= 0) {
    waitUntil (not (digitalReadOp _mp3RxPin))
  } else {
    comment 'RX pin not set so just wait a few seconds.'
    waitMillis 5000
  }
}

to mp3_repeatAllInFolder folderNum {
  comment 'Repeatedly play all files in the given folder. Does not work for top level (folder 0).'
  '_mp3_sendMP3Cmd' '0x17' folderNum folderNum
  mp3_resume
}

to mp3_resume {
  '_mp3_sendMP3Cmd' '0x0D' 0 0
}

to mp3_setVolume percent {
  comment 'Percent is 0-100'
  comment 'Range is 0-30'
  '_mp3_sendMP3Cmd' '0x06' 0 ('[misc:rescale]' percent 0 100 0 30)
}


module 'Sensor Primitives' Input
author MicroBlocks
version 1 1 
tags tilt acceleration light sensor capacitive button 
description 'Provides blocks to read tilt in the three axes, acceleration, temperature and light level. Many boards come with this particular set of sensors, such as the micro:bit, the Circuit Playground Express, the Calliope or the Citilab ED1.'

  spec 'r' '[sensors:tiltX]' 'tilt x'
  spec 'r' '[sensors:tiltY]' 'tilt y'
  spec 'r' '[sensors:tiltZ]' 'tilt z'
  spec 'r' '[display:lightLevel]' 'light level'
  spec 'r' '[sensors:temperature]' 'temperature (°C)'
  space
  spec 'r' '[sensors:touchRead]' 'capacitive sensor _' 'num' 1
  space
  spec ' ' '[sensors:i2cSetClockSpeed]' 'set i2c clock speed _' 'num' 400000
  spec ' ' '[sensors:i2cSetPins]' 'set i2c pins SDA _ SCL _' 'num num' 4 5
