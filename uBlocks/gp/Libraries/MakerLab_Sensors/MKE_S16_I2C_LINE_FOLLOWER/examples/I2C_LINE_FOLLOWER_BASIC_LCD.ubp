module main
author unknown
version 1 0 
description ''
variables _listCountAddress 

script 167 50 {
whenStarted
LCD1602_write 'Test M16' 1
LCD1602_write 'Initialize..' 2
'S16 I2C | Inittialize address _ with _ sensors' '2A' 5
waitMillis 1000
LCD1602_write ' P1 P2 P3 P4 P5' 1
forever {
  LCD1602_write ('[data:join]' ' ' ('S16 I2C | Address _ Get value from sensor _' '2A' 1) '  ' ('S16 I2C | Address _ Get value from sensor _' '2A' 2) '  ' ('S16 I2C | Address _ Get value from sensor _' '2A' 3) '  ' ('S16 I2C | Address _ Get value from sensor _' '2A' 4) '  ' ('S16 I2C | Address _ Get value from sensor _' '2A' 5)) 2
  sayIt ('S16 I2C | Address _ Get value from sensor _' '2A' 1) ('S16 I2C | Address _ Get value from sensor _' '2A' 2) ('S16 I2C | Address _ Get value from sensor _' '2A' 3) ('S16 I2C | Address _ Get value from sensor _' '2A' 4) ('S16 I2C | Address _ Get value from sensor _' '2A' 5)
  waitMillis 100
}
}


module MKE_M07_M08_I2C_LCD
author MinhKhanh210
version 1 2 
depends sensorPrims 
description ''
variables _LCD1602_ADDR _LCD1602_LINE1 _LCD1602_LINE2 _LCD1602_LOCK_MSECS _LCD2004_LINE3 _LCD2004_LINE4 

  spec ' ' 'LCD1602_write' 'LCD I2C | Print _ at Row _' 'str num' 'MakerEDU' 1
  spec ' ' 'LCD1602_write_field' 'LCD I2C | Print _ at Row _ and Columm _ to Columm _' 'str num num num' 'labVN' 1 6 10
  spec ' ' 'LCD_write_at_r_and_c' 'LCD I2C | Print _ at Columm _ and Row _' 'auto num num' 'MakerlabVN' 1 1
  space
  spec ' ' 'LCD1602_clear' 'LCD I2C | Clear all'
  space
  spec 'r' 'LCD1602_isConnected' 'is LCD connected?'
  spec ' ' 're-initialize' 're-initialize'
  space
  spec 'r' '_LCD1602 init' '_LCD1602 init'
  spec ' ' '_LCD1602 send' '_LCD1602 send byte _ mode _' 'num num' 10 1
  spec ' ' '_LCD1602 toggle enable' '_LCD1602 toggle enable _' 'num' 10
  spec ' ' 'LCD1602_write_buffer' '_write_buffer _' 'auto' 0

to LCD1602_clear {
  if (not ('_LCD1602 init')) {return}
  waitUntil (((millisOp) - _LCD1602_LOCK_MSECS) > 500)
  _LCD1602_LOCK_MSECS = (millisOp)
  _LCD1602_LINE1 = ('[data:newByteArray]' 20 32)
  _LCD1602_LINE2 = ('[data:newByteArray]' 20 32)
  _LCD2004_LINE3 = ('[data:newByteArray]' 20 32)
  _LCD2004_LINE4 = ('[data:newByteArray]' 20 32)
  '_LCD1602 send' 1 0
  _LCD1602_LOCK_MSECS = 0
}

to LCD1602_isConnected {
  return ('_LCD1602 init')
}

to LCD1602_write string line {
  LCD1602_write_field string line 1 20
}

to LCD1602_write_buffer line {
  local 'bytes' 0
  if (line == 1) {
    '_LCD1602 send' (hexToInt '80') 0
    bytes = _LCD1602_LINE1
  } (line == 2) {
    '_LCD1602 send' (hexToInt 'C0') 0
    bytes = _LCD1602_LINE2
  } (line == 3) {
    '_LCD1602 send' (hexToInt '94') 0
    bytes = _LCD2004_LINE3
  } else {
    if (line == 4) {
      '_LCD1602 send' (hexToInt 'D4') 0
      bytes = _LCD2004_LINE4
    }
  }
  for b bytes {
    '_LCD1602 send' b 1
  }
}

to LCD1602_write_field string line start end {
  if (not ('_LCD1602 init')) {return}
  if (start < 1) {
    sayIt 'first columm must start with 1'
    return
  }
  if (end > 20) {
    end = 20
  }
  string = ('[data:join]' '' string)
  if (line == 1) {
    bytes = _LCD1602_LINE1
  } (line == 2) {
    bytes = _LCD1602_LINE2
  } (line == 3) {
    bytes = _LCD2004_LINE3
  } else {
    if (line == 4) {bytes = _LCD2004_LINE4}
  }
  waitUntil (((millisOp) - _LCD1602_LOCK_MSECS) > 500)
  _LCD1602_LOCK_MSECS = (millisOp)
  local 'count' ((end - start) + 1)
  for i count {
    local 'char' 32
    if (i <= (size string)) {
      char = ('[data:unicodeAt]' i string)
      if (char > 127) {
        char = 32
      }
      atPut ((start - 1) + i) bytes char
    } else {
      atPut ((start - 1) + i) bytes char
    }
  }
  LCD1602_write_buffer line
  _LCD1602_LOCK_MSECS = 0
}

to LCD_write_at_r_and_c string col row {
  LCD1602_write_field string row col ((size string) + col)
}

to '_LCD1602 init' {
  comment 'Return true if already initialized'
  if (_LCD1602_ADDR != 0) {
    return true
  }
  comment 'Use slow I2C speed'
  '[sensors:i2cSetClockSpeed]' 100000
  comment 'Try two common I2C addresses and
use the one that gets a response'
  _LCD1602_ADDR = (hexToInt '27')
  if ((i2cGet _LCD1602_ADDR 0) < 0) {
    _LCD1602_ADDR = (hexToInt '3F')
  }
  if ((i2cGet _LCD1602_ADDR 0) < 0) {
    _LCD1602_ADDR = 0
    comment 'LCD panel not found'
    return false
  }
  _LCD1602_LINE1 = ('[data:newByteArray]' 20 32)
  _LCD1602_LINE2 = ('[data:newByteArray]' 20 32)
  _LCD2004_LINE3 = ('[data:newByteArray]' 20 32)
  _LCD2004_LINE4 = ('[data:newByteArray]' 20 32)
  comment 'Initialize display'
  '_LCD1602 send' (hexToInt '33') 0
  '_LCD1602 send' (hexToInt '32') 0
  '_LCD1602 send' (hexToInt '06') 0
  '_LCD1602 send' (hexToInt '0C') 0
  '_LCD1602 send' (hexToInt '28') 0
  '_LCD1602 send' (hexToInt '01') 0
  '[sensors:i2cSetClockSpeed]' 400000
  waitMillis 250
  return true
}

to '_LCD1602 send' bits mode {
  comment 'Use slow I2C speed'
  '[sensors:i2cSetClockSpeed]' 100000
  local '_LCD1602 BACKLIGHT' (hexToInt '8')
  local 'high bits' ((mode | (bits & (hexToInt 'F0'))) | (v '_LCD1602 BACKLIGHT'))
  local 'low bits' ((mode | ((bits << 4) & (hexToInt 'F0'))) | (v '_LCD1602 BACKLIGHT'))
  '[sensors:i2cWrite]' _LCD1602_ADDR (v 'high bits')
  '_LCD1602 toggle enable' (v 'high bits')
  '[sensors:i2cWrite]' _LCD1602_ADDR (v 'low bits')
  '_LCD1602 toggle enable' (v 'low bits')
  comment 'Revert to fast I2C speed'
  '[sensors:i2cSetClockSpeed]' 400000
  waitMillis 1
}

to '_LCD1602 toggle enable' bits {
  local '_LCD1602 ENABLE' 4
  waitMicros 5
  '[sensors:i2cWrite]' _LCD1602_ADDR (bits | (v '_LCD1602 ENABLE'))
  waitMicros 5
  '[sensors:i2cWrite]' _LCD1602_ADDR (bits & ('~' (v '_LCD1602 ENABLE')))
  waitMicros 5
}

to 're-initialize' {
  _LCD1602_ADDR = 0
}


module MKE_S16_I2C_LINE_FOLLOWER
author MinhKhanh210
version 1 0 
description 'S16 MakerLab sensor library'
variables _listCountAddress _listCountData _listCountMode 

  spec ' ' 'S16 I2C | Inittialize address _ with _ sensors' 'S16 I2C | Inittialize address _ with _ sensors' 'auto num' '2A' 5
  space
  spec ' ' 'S16 I2C | Address _ Set Black' 'S16 I2C | Address _ Set Black' 'auto' '2A'
  spec ' ' 'S16 I2C | Address _ Set White' 'S16 I2C | Address _ Set White' 'auto' '2A'
  spec ' ' 'S16 I2C | Set this driver address to _' 'S16 I2C | Set this sensor address to _' 'auto' '2B'
  space
  spec 'r' 'S16 I2C | Address _ Get value' 'S16 I2C | Address _ Get value' 'auto' '2A'
  spec 'r' 'S16 I2C | Address _ Get value from sensor _' 'S16 I2C | Address _ Get value of sensor _' 'auto num' '2A' 1
  spec 'r' 'S16 I2C | Address _ Get raw value from sensor _' 'S16 I2C | Address _ Get raw value of sensor _' 'auto auto' '2A' 1
  spec 'r' 'S16 I2C | Address _ Get threshold of sensor _' 'S16 I2C | Address _ Get threshold of sensor _' 'auto num' '2A' 1
  space
  spec ' ' '_getDataOverI2C' '_getDataOverI2C'
  spec 'r' '_Convert address _ to DEC value' '_Convert address _ to DEC value' 'auto' '2A'
  spec 'r' '_DEC' '_Convert value _ at DEC radix to _ radix Length _ Reversed _' 'num auto num bool' 255 2 4 false

to 'S16 I2C | Address _ Get raw value from sensor _' address index {
  return (at index (at ('[data:find]' ('_Convert address _ to DEC value' address) _listCountAddress) _listCountData))
}

to 'S16 I2C | Address _ Get threshold of sensor _' address index {
  return (at (index + 6) (at ('[data:find]' ('_Convert address _ to DEC value' address) _listCountAddress) _listCountData))
}

to 'S16 I2C | Address _ Get value' address {
  return (at 6 (at ('[data:find]' ('_Convert address _ to DEC value' address) _listCountAddress) _listCountData))
}

to 'S16 I2C | Address _ Get value from sensor _' address index {
  return (((at 6 (at ('[data:find]' ('_Convert address _ to DEC value' address) _listCountAddress) _listCountData)) >> (index - 1)) & 1)
}

to 'S16 I2C | Address _ Set Black' address {
  atPut ('[data:find]' ('_Convert address _ to DEC value' address) _listCountAddress) _listCountMode 1
}

to 'S16 I2C | Address _ Set White' address {
  atPut ('[data:find]' ('_Convert address _ to DEC value' address) _listCountAddress) _listCountMode 0
}

to 'S16 I2C | Inittialize address _ with _ sensors' address sensorCount {
  if (_listCountAddress == 0) {
    _listCountAddress = ('[data:makeList]')
    _listCountData = ('[data:makeList]')
    _listCountMode = ('[data:makeList]')
    sendBroadcast '_getDataOverI2C'
  }
  local 'cAddress' ('_Convert address _ to DEC value' address)
  if (cAddress >= 127) {
    return 0
  }
  local 'locateAddress' ('[data:find]' cAddress _listCountAddress)
  if (locateAddress < 0) {
    '[data:addLast]' cAddress _listCountAddress
    '[data:addLast]' ('[data:makeList]') _listCountData
    '[data:addLast]' 1 _listCountMode
    sayIt 'Initialize successful'
  } else {
    sayIt 'Address already exists'
  }
}

to 'S16 I2C | Set this driver address to _' address {
  local 'cAddress' ('_Convert address _ to DEC value' address)
  if (cAddress >= 127) {
    return 0
  }
  local 'addresses' 0
  local 'getAddress' 0
  local 'locateAddress' 0
  for i (size _listCountAddress) {
    if ('[sensors:i2cExists]' (at i _listCountAddress)) {
      addresses += 1
      getAddress = (at i _listCountAddress)
      locateAddress = ('[data:find]' getAddress _listCountAddress)
    }
  }
  if (addresses > 1) {
    return 0
  } else {
    waitMillis 5
    '[sensors:i2cWrite]' getAddress ('[data:makeList]' 1 0 0 cAddress)
    waitMillis 100
    if ('[sensors:i2cExists]' cAddress) {
      sayIt 'Success!' 'Use address' cAddress 'or' ('_DEC' cAddress 16 2 false) 'to get data'
      if (not (_listCountAddress == 0)) {
        atPut locateAddress _listCountAddress cAddress
      }
    }
  }
}

to '_Convert address _ to DEC value' address {
  local 'cAddress' (ifExpression (isType address 'string') (hexToInt address) address)
  return cAddress
}

to '_DEC' decNo base padLength reversed {
  local '_answer' ('[data:makeList]')
  local '_output' ''
  repeatUntil (decNo < base) {
    '[data:addLast]' (decNo - ((decNo / base) * base)) _answer
    decNo = (decNo / base)
  }
  '[data:addLast]' decNo _answer
  repeatUntil ((size _answer) == 0) {
    if ((at 'last' _answer) == 0) {
      _output = ('[data:join]' _output '0')
    } else {
      _output = ('[data:join]' _output (at (at 'last' _answer) '123456789ABCDEFGHIJKLMNOPQRSTUV'))
    }
    '[data:delete]' 'last' _answer
  }
  if (and (padLength > 0) ((size _output) < padLength)) {
    _output = ('[data:join]' ('[data:copyFromTo]' '0000000000000000' 1 (padLength - (size _output))) _output)
  }
  if reversed {
    _answer = ('[data:split]' _output '')
    _output = ('[data:makeList]')
    repeat (size _answer) {
      '[data:addLast]' (at 'last' _answer) _output
      '[data:delete]' 'last' _answer
    }
    _output = ('[data:join]' '' ('[data:joinStrings]' _output))
  }
  return _output
}

to '_getDataOverI2C' {
  forever {
    for i (size _listCountAddress) {
      local 'var' (newList 11)
      waitMillis 10
      '[sensors:i2cRead]' (at i _listCountAddress) var
      atPut i _listCountData var
      if ((at i _listCountMode) < 1) {
        atPut 6 (at i _listCountData) (((at 6 var) ^ 31) & 31)
      }
    }
  }
}


module 'Sensor Primitives' Input
author MicroBlocks
version 1 1 
tags tilt acceleration light sensor capacitive button 
description 'Provides blocks to read tilt in the three axes, acceleration, temperature and light level. Many boards come with this particular set of sensors, such as the micro:bit, the Circuit Playground Express, the Calliope or the Citilab ED1.'

  spec 'r' '[sensors:tiltX]' 'tilt x'
  spec 'r' '[sensors:tiltY]' 'tilt y'
  spec 'r' '[sensors:tiltZ]' 'tilt z'
  spec 'r' '[display:lightLevel]' 'light level'
  spec 'r' '[sensors:temperature]' 'temperature (°C)'
  space
  spec 'r' '[sensors:touchRead]' 'capacitive sensor _' 'num' 1
  space
  spec ' ' '[sensors:i2cSetClockSpeed]' 'set i2c clock speed _' 'num' 400000
  spec ' ' '[sensors:i2cSetPins]' 'set i2c pins SDA _ SCL _' 'num num' 4 5
